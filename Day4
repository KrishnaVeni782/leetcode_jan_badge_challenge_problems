Unique Length-3 Palindromic Subsequences

code:
class Solution {
    public int countPalindromicSubsequence(String s) {
        int n = s.length();
        int[] left = new int[26]; // Tracks if a character exists to the left of the current index
        int[] right = new int[26]; // Tracks the frequency of characters to the right
        HashSet<String> uniquePalindromes = new HashSet<>();

        // Populate the right array with character frequencies
        for (char c : s.toCharArray()) {
            right[c - 'a']++;
        }

        // Iterate through the string and calculate unique palindromes
        for (int i = 0; i < n; i++) {
            char middle = s.charAt(i);
            right[middle - 'a']--; // Remove the current character from the right array

            for (char c = 'a'; c <= 'z'; c++) {
                // Check if the character exists on both sides of the middle character
                if (left[c - 'a'] > 0 && right[c - 'a'] > 0) {
                    uniquePalindromes.add("" + c + middle + c); // Construct palindrome and add to set
                }
            }

            left[middle - 'a']++; // Add the current character to the left array
        }

        return uniquePalindromes.size(); // Return the number of unique palindrome
        
    }
}
